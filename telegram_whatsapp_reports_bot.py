# telegram_whatsapp_reports_bot.py
import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler, CallbackQueryHandler

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Conversation states
CHOOSING, COLLECT_NUMBER, COLLECT_DESC, COLLECT_MEDIA, CONFIRM = range(5)

# Configure these
WHATSAPP_SUPPORT_EMAIL = "support@whatsapp.com"   # public contact shown on WhatsApp site
YOUR_WHATSAPP_CHANNEL_LINK = "https://chat.whatsapp.com/yourchannelcode"  # change to your channel
BOT_SIGNATURE = "\n\n--\nReport generated by MyTelegramBot. Join our WhatsApp channel: " + YOUR_WHATSAPP_CHANNEL_LINK

def start_kb():
    kb = [
        [InlineKeyboardButton("Report scammer (Ban)", callback_data="report")],
        [InlineKeyboardButton("Request unban (Permanent ban)", callback_data="unban")],
        [InlineKeyboardButton("Help / How to send", callback_data="help")],
    ]
    return InlineKeyboardMarkup(kb)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "Hi — I can help create WhatsApp ban/unban requests. Choose an action:",
        reply_markup=start_kb()
    )
    return CHOOSING

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    action = q.data
    context.user_data['action'] = action
    if action == 'help':
        await q.edit_message_text("WhatsApp recommends reporting from inside the app (Settings → Help → Contact Us). This bot builds the text and attachments for you. Choose Report or Unban to proceed.", reply_markup=start_kb())
        return CHOOSING
    await q.edit_message_text(f"You selected *{action}*. Please send the *phone number* (international format, e.g. +2348012345678) to report/unban.", parse_mode="Markdown")
    return COLLECT_NUMBER

async def collect_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['phone'] = update.message.text.strip()
    await update.message.reply_text("Please write a short description of what happened (evidence summary). You can also upload screenshots after this.")
    return COLLECT_DESC

async def collect_desc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['desc'] = update.message.text.strip()
    await update.message.reply_text("If you have screenshots or chat export, send them now (or send /skip).")
    return COLLECT_MEDIA

async def media_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # save file_ids for later download if desired
    if 'media' not in context.user_data:
        context.user_data['media'] = []
    if update.message.photo:
        file_id = update.message.photo[-1].file_id
        context.user_data['media'].append(("photo", file_id))
    elif update.message.document:
        context.user_data['media'].append(("document", update.message.document.file_id))
    await update.message.reply_text("Received. Send more or send /done to finish.")
    return COLLECT_MEDIA

async def skip_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("No media. Preparing your report...")
    return await prepare_and_confirm(update, context)

async def done_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("Thanks — preparing your report...")
    return await prepare_and_confirm(update, context)

def build_report_text(user_data):
    action = user_data.get('action', 'report')
    phone = user_data.get('phone', '')
    desc = user_data.get('desc', '')
    reporter = user_data.get('reporter_contact', '')
    lines = []
    if action == 'report':
        lines.append(f"Subject: Report of suspected scammer / fraudulent activity")
        lines.append(f"Phone number: {phone}")
        lines.append(f"Description: {desc}")
        lines.append("Requested action: Please investigate this account for policy violations and suspend if confirmed.")
    else:
        lines.append(f"Subject: Request to review permanent ban for phone {phone}")
        lines.append(f"Phone number: {phone}")
        lines.append(f"Reason for unban request: {desc}")
        lines.append("Requested action: Please review and reinstate this number if the ban was applied in error.")
    if reporter:
        lines.append(f"Reporter contact: {reporter}")
    lines.append(BOT_SIGNATURE)
    return "\n\n".join(lines)

async def prepare_and_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    context.user_data.setdefault('reporter_contact', f"Telegram:{user.id}")
    report_text = build_report_text(context.user_data)
    context.user_data['report_text'] = report_text

    kb = [
        [InlineKeyboardButton("Copy message (show)", callback_data="show")],
        [InlineKeyboardButton("Open email client (mailto)", callback_data="mailto")],
        [InlineKeyboardButton("Send email via this bot (SMTP) [optional]", callback_data="smtp")],
        [InlineKeyboardButton("Cancel", callback_data="cancel")]
    ]
    await update.message.reply_text("Report ready. Choose how you want to send it:", reply_markup=InlineKeyboardMarkup(kb))
    return CONFIRM

async def confirm_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    action = q.data
    if action == 'show':
        await q.edit_message_text(f"---- REPORT ----\n\n{context.user_data['report_text']}\n\n(Attach screenshots in WhatsApp app or attach to email.)")
        return ConversationHandler.END
    if action == 'mailto':
        import urllib.parse
        subject = urllib.parse.quote("WhatsApp support request")
        body = urllib.parse.quote(context.user_data['report_text'])
        mailto = f"mailto:{WHATSAPP_SUPPORT_EMAIL}?subject={subject}&body={body}"
        await q.edit_message_text(f"Click this link to open your email client and send the report:\n{mailto}\n\n(If it doesn't open, copy the message and paste it into WhatsApp Help → Contact Us or your email.)")
        return ConversationHandler.END
    if action == 'smtp':
        # optional: send via SMTP if configured
        smtp_host = os.getenv("SMTP_HOST")
        smtp_user = os.getenv("SMTP_USER")
        smtp_pass = os.getenv("SMTP_PASS")
        smtp_from = os.getenv("SMTP_FROM", smtp_user)
        if not smtp_host or not smtp_user or not smtp_pass:
            await q.edit_message_text("SMTP not configured on this bot. Please configure SMTP_* env vars to enable sending.")
            return ConversationHandler.END
        # send email
        import smtplib, ssl
        from email.message import EmailMessage
        msg = EmailMessage()
        msg["Subject"] = "WhatsApp support request"
        msg["From"] = smtp_from
        msg["To"] = WHATSAPP_SUPPORT_EMAIL
        msg.set_content(context.user_data['report_text'])
        try:
            ctx = ssl.create_default_context()
            with smtplib.SMTP_SSL(smtp_host, 465, context=ctx) as server:
                server.login(smtp_user, smtp_pass)
                server.send_message(msg)
            await q.edit_message_text("Email sent to WhatsApp support via bot SMTP.")
        except Exception as e:
            logger.exception("SMTP send failed")
            await q.edit_message_text(f"Failed to send email via SMTP: {e}")
        return ConversationHandler.END
    if action == 'cancel':
        await q.edit_message_text("Cancelled.")
        return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("Cancelled. Send /start to begin again.")
    return ConversationHandler.END

def main():
    TOKEN = os.getenv("TELEGRAM_TOKEN")
    app = ApplicationBuilder().token(TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler('start', start), MessageHandler(filters.Regex('^/start$'), start)],
        states={
            CHOOSING: [CallbackQueryHandler(button_handler)],
            COLLECT_NUMBER: [MessageHandler(filters.TEXT & ~filters.COMMAND, collect_number)],
            COLLECT_DESC: [MessageHandler(filters.TEXT & ~filters.COMMAND, collect_desc)],
            COLLECT_MEDIA: [
                MessageHandler(filters.PHOTO | filters.Document.ALL & ~filters.COMMAND, media_handler),
                CommandHandler('skip', skip_media),
                CommandHandler('done', done_media),
            ],
            CONFIRM: [CallbackQueryHandler(confirm_handler)]
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        allow_reentry=True
    )

    app.add_handler(conv)
    app.run_polling()

if __name__ == "__main__":
    main()
